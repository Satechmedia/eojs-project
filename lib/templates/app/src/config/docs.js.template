import swaggerJSDoc from 'swagger-jsdoc';
import swaggerUi from 'swagger-ui-express';
import path from 'path';
import fs from 'fs';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

class APIDocumentation {
  constructor(app, options = {}) {
    this.app = app;
    this.options = options;
    this.swaggerSpec = null;
  }

  init() {
    // Read package.json for defaults
    const packageJsonPath = path.join(process.cwd(), 'package.json');
    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));

    const swaggerDefinition = {
      openapi: '3.0.0',
      info: {
        title: this.options.title || packageJson.name || '{{APP_NAME}} API',
        version: this.options.version || packageJson.version || '1.0.0',
        description: this.options.description || packageJson.description || 'API Documentation for {{APP_NAME}}'
      },
      servers: [
        {
          url: this.options.server || `http://localhost:${process.env.PORT || 3000}`,
          description: 'Development server'
        }
      ],
      components: {
        securitySchemes: {
          bearerAuth: {
            type: 'http',
            scheme: 'bearer',
            bearerFormat: 'JWT'
          }
        }
      },
      security: [
        {
          bearerAuth: []
        }
      ]
    };

    // Find all route files
    const routesDir = path.join(process.cwd(), 'src/routes');
    const routeFiles = [];
    
    if (fs.existsSync(routesDir)) {
      fs.readdirSync(routesDir).forEach(file => {
        if (file.endsWith('.js')) {
          routeFiles.push(path.join(routesDir, file));
        }
      });
    }

    // Find all controller files
    const controllersDir = path.join(process.cwd(), 'src/controllers');
    const controllerFiles = [];
    
    if (fs.existsSync(controllersDir)) {
      fs.readdirSync(controllersDir).forEach(file => {
        if (file.endsWith('.js')) {
          controllerFiles.push(path.join(controllersDir, file));
        }
      });
    }

    // Find all model files
    const modelsDir = path.join(process.cwd(), 'src/models');
    const modelFiles = [];
    
    if (fs.existsSync(modelsDir)) {
      fs.readdirSync(modelsDir).forEach(file => {
        if (file.endsWith('.js')) {
          modelFiles.push(path.join(modelsDir, file));
        }
      });
    }

    const apis = [...routeFiles, ...controllerFiles, ...modelFiles];

    const swaggerOptions = {
      swaggerDefinition,
      apis
    };

    this.swaggerSpec = swaggerJSDoc(swaggerOptions);

    // Setup the Swagger UI route
    this.app.use(
      this.options.path || '/api-docs',
      swaggerUi.serve,
      swaggerUi.setup(this.swaggerSpec)
    );

    // Expose swagger.json endpoint
    this.app.get('/swagger.json', (req, res) => {
      res.setHeader('Content-Type', 'application/json');
      res.send(this.swaggerSpec);
    });

    return this;
  }
}

export default APIDocumentation;